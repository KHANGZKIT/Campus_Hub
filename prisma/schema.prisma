// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String   @id @default(uuid())
  email        String   @unique
  passwordHash String
  fullName     String?
  createdAt    DateTime @default(now())
  bookings     Booking[]
  roles        UserRole[]
}

model Room {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  capacity  Int
  createdAt DateTime @default(now())
  bookings  Booking[]
}

enum BookingStatus {
  approved
  pending
  cancelled
}

model Booking {
  id        String        @id @default(uuid())
  roomId    Int
  userId    String
  startsAt  DateTime
  endsAt    DateTime
  status    BookingStatus @default(approved)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  room Room @relation(fields: [roomId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([roomId, startsAt, endsAt])
}

model Role {
  id    Int     @id @default(autoincrement())
  name  String  @unique
  users UserRole[]
}

model UserRole {
  userId String
  roleId Int
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  role   Role @relation(fields: [roleId], references: [id], onDelete: Cascade)
  @@id([userId, roleId])
}




